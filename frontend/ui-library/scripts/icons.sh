#!/usr/bin/env bash

STORYBOOK="./src/design-system/icons/icons.stories.tsx";
EXPORTS="./src/design-system/icons/index.ts";
ROOT="./";

rm -f $STORYBOOK;
touch $STORYBOOK;

rm -f $EXPORTS;
touch $EXPORTS;

echo "Exporting icons";
printf "// This file is autogenerated. Run 'npm run icons' to add new icon.
import { Text } from 'src/design-system/foundation';
import { Grid, GridItem } from 'src/design-system/layout';
import { Wrapper } from 'src/storybook/wrapper';
import { copyToClipboard } from 'src/utils/copy';

import {" >> $STORYBOOK;

components="";

files=$(find $ROOT -type f -name '*.icon.tsx' | sort);

for path in $files
do
  # Find method return not the file name but path to the file. Here we get rid of the path to the icon and save only the file name
  # ./some-icon.icon.tsx -> some-icon.icon.tsx
  file_name="${path##*/}";

  # Remove file extension
  # some-icon.icon.tsx -> some-icon
  icon_name=${file_name%.icon.tsx};

  # Generate component name
  # some-icon -> SomeIconIcon
  component_name="$(perl -pe 's/(^|-)(\w)/\U$2/g' <<< "$icon_name")Icon";

  # Generate list of components
  components+=" <GridItem data-name=\"$component_name\"><$component_name /><Text>$component_name</Text></GridItem>";

  # Write result to iconsExport.ts file
  echo "export { ${component_name} } from './assets/${icon_name}.icon';" >> $EXPORTS;
  printf '#';

  echo "  ${component_name}," >> $STORYBOOK;
  printf '#';
done;

# RENDER MARKUP
printf %s "
} from './index';

export default {
    title: 'Icons/Icons',
};

const styles = \`<style>
.grid-item {
    font-size: 2rem;
}
.grid-item svg {
    font-size: 4rem;
}
.grid-item > * {
    pointer-events: none;
}
.grid-item:hover {
    color: var(--primary-blue-500);
}
.text {
    margin-top: 2rem;
}
</style>\`;

export const Base = () => {
    return (
        <Wrapper title=\"Icons | Base\" styles={styles}>
            <Grid size={{ base: 1, sm: 2, md: 3, lg: 4 }}>
              $components
            </Grid>
        </Wrapper>
    );
};

Base.play = async ({ canvasElement }: Record<'canvasElement', HTMLCanvasElement>) => {
    const list = canvasElement.querySelector('.grid');
    if (!list) return;

    const copyText = (element: HTMLDivElement) => {
        const iconName = element.dataset.name ?? '';

        const text = element.querySelector('.text');
        if (!text) return;

        copyToClipboard(iconName)
            .then(() => {
                text.innerHTML = 'copied!';
            })
            .catch(() => {
                text.innerHTML = 'error!';
            })
            .finally(() => {
                setTimeout(() => {
                    text.innerHTML = iconName;
                }, 400);
            });
    };

    list.addEventListener('click', event => {
        const target = event.target as HTMLDivElement;
        if (target.classList.contains('grid-item')) {
            copyText(target);
        }
    });
};
" >> $STORYBOOK;

echo "#";

npx prettier -c .prettierrc -w "$STORYBOOK"

printf "\nCompleted\n";

